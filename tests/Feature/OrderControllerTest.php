<?php

namespace Tests\Feature;

use App\Events\OrderSubmited;
use App\Order;
use App\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class OrderControllerTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();
    }

    /** @test */
    public function somali_not_allowed_to_create_order()
    {
        $products = Product::inRandomOrder()
            ->limit(3)
            ->get()
            ->mapWithKeys(function(Product $product) {
                return [$product->id => 1];
            })
            ->toArray();

        Http::fake([ '*' => Http::response(['country_code' => 'SO'])]);
        $this->postJson('/orders', ['products' => $products])->assertStatus(403);
    }

    /** @test */
    public function can_create_order_if_not_from_somali()
    {
        $items = Product::inRandomOrder()
            ->limit(3)
            ->get()
            ->mapWithKeys(function(Product $product) {
                return [$product->id => 1];
            })
            ->toArray();

        $this->postJson('/orders', ['products' => $items])->assertRedirect();

        $order = Order::orderBy('id', 'DESC')->first();
        $this->assertInstanceOf(Order::class, $order);

        foreach ($order->products as $product) {
            $this->assertEquals($items[$product->id], $product->pivot->quantity);
        }
    }

    /** @test */
    public function expect_valid_information_on_order_submit()
    {
        $order = factory(Order::class)->create();

        $this->patchJson('/orders/'.$order->id, ['email' => 'qeqre'])->assertStatus(422);
    }

    /** @test */
    public function can_update_order()
    {
        $order = factory(Order::class)->create();

        Event::fake([OrderSubmited::class]);

        $this->patchJson('/orders/'.$order->id, [
            'email' => 'test@example.com',
            'shipping_address_1' => 'address',
            'city' => 'Tokyo',
            'country_code' => '23',
            'zip_postal_code' => '434234',
        ])->assertRedirect();

        Event::assertDispatched(OrderSubmited::class);
    }
}
